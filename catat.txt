# Email (opsional; kalau tidak dipakai, biarkan kosong)
SMTP_HOST = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_USER = "edigitaldompet@gmail.com"
SMTP_PASS = "jyag nujw fwki njdl"   # App Password dari Gmail
SENDER    = "HaloRadio <edigitaldompet@gmail.com>"  # HARUS sama domain
ADMIN_EMAIL = "edigitaldompet@gmail.com"  # atau email lain yang valid



<!DOCTYPE html>
<html lang="id">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>HaloRadio • Siaran</title>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&display=swap');

    :root{
      --green:#22c55e;   /* hijau muda */
      --green-2:#4ade80; /* hijau glow */
      --ink:#0f172a;
      --bg:#f0fdf4;
      --panel:#ffffff;
      --soft:#f8fafc;
    }

    *{box-sizing:border-box}
    body{
      margin:0;font-family:'Poppins',sans-serif;color:var(--ink);
      background:
        radial-gradient(1000px 500px at 50% -10%, rgba(34,197,94,.25), transparent 70%),
        linear-gradient(180deg, #ffffff, var(--bg));
      min-height:100vh;display:flex;flex-direction:column;
    }

    /* NAVBAR TRANSPARAN */
    nav{
      position:fixed;top:0;left:0;right:0;
      display:flex;justify-content:center;align-items:center;
      padding:18px 28px;
      background:rgba(255,255,255,.28);
      backdrop-filter:blur(12px) saturate(160%);
      border-bottom:1px solid rgba(255,255,255,.22);
      z-index:1000;
    }
    nav h1{margin:0;font-size:1.6rem;font-weight:700;text-shadow:0 0 8px rgba(74,222,128,.7);}

    /* LEBIH LAPANG: container diberi gutter besar */
    .container{
      flex:1;
      padding:120px 32px 24px;       /* top lebih tinggi biar tak ketutup navbar */
      max-width:1200px;
      margin:auto;
    }

    /* GRID: Player + Request column (dengan gap lebih besar) */
    .grid{
      display:grid;
      grid-template-columns: 1.75fr 1fr;
      gap:28px;
    }
    @media (max-width: 980px){ .grid{grid-template-columns:1fr;} }

    /* PANEL/ CARD */
    .panel{
      background:var(--panel);
      padding:36px;
      border-radius:24px;
      border:1px solid rgba(0,0,0,.06);
      box-shadow:0 14px 40px rgba(74,222,128,.22);
    }

    /* PLAYER */
    .radio-player .status{
      margin:2px auto 18px;padding:12px 28px;border-radius:999px;font-weight:700;
      background:#eef2f7;color:#64748b;display:inline-block;letter-spacing:.3px
    }
    .radio-player .status.online{
      background:var(--green);color:#fff;box-shadow:0 0 12px var(--green-2);
      animation:pulse 2s infinite
    }
    @keyframes pulse{0%{box-shadow:0 0 0 0 rgba(74,222,128,.65);}70%{box-shadow:0 0 0 16px rgba(74,222,128,0);}100%{box-shadow:0 0 0 0 rgba(74,222,128,0);}}

    .info{margin:8px 0;font-size:1rem;font-weight:500;color:#065f46}
    .info span{font-weight:800;color:var(--green);text-shadow:0 0 6px rgba(74,222,128,.5)}

    /* audio dibungkus supaya tidak mepet ke tepi */
    .audio-wrap{
      margin-top:20px;padding:14px;border-radius:16px;background:var(--soft);
      border:1px solid #e2e8f0;box-shadow:inset 0 0 0 1px rgba(255,255,255,.6), 0 6px 16px rgba(74,222,128,.18);
    }
    audio{width:100%;display:block;border-radius:12px}

    /* REQUEST FORM (kolom kanan) */
    .card h3{margin:0 0 14px;color:var(--green);text-shadow:0 0 6px rgba(74,222,128,.6)}
    .request-form{display:grid;gap:12px}
    .request-form input, .request-form button{
      height:48px;border-radius:12px;border:1px solid #e2e8f0;font-size:1rem;
      padding:12px 14px;
    }
    .request-form input{background:#f8fafc}
    .request-form input:focus{outline:3px solid rgba(34,197,94,.25);border-color:#bbf7d0}
    .request-form button{
      height:52px;background:linear-gradient(90deg,var(--green),var(--green-2));
      color:#fff;font-weight:800;border:none;cursor:pointer;
      box-shadow:0 8px 20px rgba(74,222,128,.4)
    }
    .msg{font-size:.92rem;margin-top:4px}
    .msg.ok{color:#16a34a}.msg.err{color:#dc2626}

    /* FOOTER lebih renggang & tidak mepet */
    .footer-wrap{
      width:min(1200px, 94vw);
      margin:44px auto 28px;
      padding:18px 24px;
      background:#0f172a;color:#cbd5e1;border-radius:16px;
      box-shadow:0 8px 20px rgba(15,23,42,.25);
      text-align:center;
    }
  </style>
</head>
<body>
  <nav><h1>🎧 HaloRadio</h1></nav>

  <div class="container">
    <div class="grid">
      <!-- Player -->
      <section class="panel radio-player">
        <div id="broadcast-status" class="status">STATUS: OFFLINE</div>
        <div class="info">👥 Pendengar aktif: <span id="listener-count">0</span></div>
        <div class="info">🎵 Sedang diputar: <span id="current-song">-</span></div>

        <div class="audio-wrap">
          <audio id="radio-player" controls>
            <source src="/stream" type="audio/mpeg">
          </audio>
        </div>
      </section>

      <!-- Request Column -->
      <aside class="panel card">
        <h3>📩 Request Lagu</h3>
        <form class="request-form" id="reqForm">
          <input id="reqName" type="text" placeholder="Nama Anda" required>
          <input id="reqTitle" type="text" placeholder="Judul Lagu" required>
          <button type="submit">Kirim Request</button>
          <div id="reqMsg" class="msg"></div>
        </form>
      </aside>
    </div>
  </div>

  <footer class="footer-wrap">© 2025 HaloRadio • Dibuat dengan Flask, Mixxx, Icecast & Ngrok</footer>

  <script>
    const player = document.getElementById('radio-player');
    const statusDiv = document.getElementById('broadcast-status');
    const listenerCount = document.getElementById('listener-count');
    const currentSong = document.getElementById('current-song');

    // Status player
    function setStatus(txt, online=false){
      statusDiv.textContent = txt;
      statusDiv.classList.toggle('online', online);
    }
    player.addEventListener('play',  () => setStatus('STATUS: MENGUDARA ▶️', true));
    player.addEventListener('pause', () => setStatus('STATUS: OFFLINE ⏹️', false));
    player.addEventListener('error', () => setStatus('STATUS: GAGAL TERHUBUNG', false));

    // Stats dari server
    async function fetchStats() {
      try {
        const res = await fetch('/stats', { cache: 'no-store' });
        const data = await res.json();
        listenerCount.textContent = data.listeners ?? 0;
        currentSong.textContent = data.now_playing || '-';
      } catch {
        listenerCount.textContent = '0';
        currentSong.textContent = '-';
      }
    }
    fetchStats(); setInterval(fetchStats, 5000);

    // Request lagu
    const form = document.getElementById('reqForm');
    const nameEl = document.getElementById('reqName');
    const titleEl = document.getElementById('reqTitle');
    const msgEl = document.getElementById('reqMsg');
    form.addEventListener('submit', async (e) => {
      e.preventDefault(); msgEl.textContent=''; msgEl.className='msg';
      const payload = { name: nameEl.value.trim(), title: titleEl.value.trim() };
      if (!payload.name || !payload.title){ msgEl.textContent='Nama & Judul wajib diisi.'; msgEl.classList.add('err'); return; }
      try {
        const r = await fetch('/api/request_song', { method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify(payload) });
        const j = await r.json();
        if(j.ok){ msgEl.textContent='Terima kasih! Request kamu sudah dikirim.'; msgEl.classList.add('ok'); form.reset(); }
        else { throw new Error(j.error||'Gagal mengirim.'); }
      } catch(err){ msgEl.textContent = err.message || 'Terjadi kesalahan.'; msgEl.classList.add('err'); }
    });
  </script>
</body>
</html>  ,,,, <!DOCTYPE html>
<html lang="id">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin • Login</title>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&display=swap');
    :root{ --green:#22c55e; --green-2:#4ade80; --ink:#0f172a; --bg:#f0fdf4; }

    *{box-sizing:border-box}
    body{
      margin:0;font-family:'Poppins',sans-serif;color:var(--ink);
      min-height:100vh;display:flex;align-items:center;justify-content:center;
      padding:24px;
      background:
        radial-gradient(900px 400px at 50% -10%, rgba(34,197,94,.25), transparent 70%),
        linear-gradient(180deg, #ffffff, var(--bg));
    }

    .card{
      width:min(520px, 94vw);
      background:#fff;padding:36px 32px;border-radius:22px;
      border:1px solid rgba(0,0,0,.06);
      box-shadow:0 14px 40px rgba(74,222,128,.28);
      text-align:center;
    }

    h1{margin:0 0 18px;font-size:1.8rem;letter-spacing:.2px}
    .sub{margin:-6px 0 22px;color:#64748b;font-size:.95rem}

    form{display:grid;gap:14px;margin-top:6px}
    input, button{
      width:100%;height:48px;padding:12px 14px;border-radius:12px;border:1px solid #e2e8f0;
      font-size:1rem;
    }
    input{background:#f8fafc}
    input:focus{outline:3px solid rgba(34,197,94,.25);border-color:#bbf7d0}
    button{
      background:linear-gradient(90deg,var(--green),var(--green-2));
      color:#fff;font-weight:700;cursor:pointer;border:none;
      box-shadow:0 8px 20px rgba(74,222,128,.4);height:52px;
    }
    button:hover{filter:brightness(1.05);transform:translateY(-1px)}

    .err{color:#dc2626;margin-top:10px;font-size:.95rem}
  </style>
</head>
<body>
  <div class="card">
    <h1>🎧 HaloRadio Admin</h1>
    <div class="sub">Masuk untuk melihat & mengelola request lagu</div>

    <form method="post">
      <input type="text" name="username" placeholder="Username" autocomplete="username" required>
      <input type="password" name="password" placeholder="Password" autocomplete="current-password" required>
      <button type="submit">Masuk</button>
    </form>

    {% if error %}<div class="err">{{ error }}</div>{% endif %}
  </div>
</body>
</html> ,,,,<!DOCTYPE html>
<html lang="id">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin • Request Lagu</title>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&display=swap');
    :root{ --green:#22c55e; --green-2:#4ade80; --ink:#0f172a; --bg:#f0fdf4; }
    body{
      margin:0;font-family:'Poppins',sans-serif;color:var(--ink);
      min-height:100vh;display:flex;flex-direction:column;
      background:
        radial-gradient(1000px 500px at 50% -10%, rgba(34,197,94,.25), transparent 70%),
        linear-gradient(180deg, #ffffff, var(--bg));
    }
    nav{
      position:sticky;top:0;display:flex;align-items:center;justify-content:space-between;
      padding:16px 24px;background:rgba(255,255,255,.25);
      backdrop-filter:blur(12px) saturate(160%);border-bottom:1px solid rgba(255,255,255,.2);
    }
    .brand{font-weight:700}
    .badge{
      display:inline-flex;align-items:center;gap:8px;
      background:linear-gradient(90deg,var(--green),var(--green-2));
      color:#fff;padding:8px 14px;border-radius:999px;font-weight:700;
      box-shadow:0 0 10px rgba(74,222,128,.55);
    }
    .container{max-width:1100px;margin:20px auto;padding:0 20px;flex:1;width:100%}
    .filter{
      margin:10px 0 18px;display:flex;gap:10px;align-items:center;flex-wrap:wrap;
    }
    select, button{
      padding:10px 12px;border:none;border-radius:10px;font-size:.95rem;
    }
    button{
      background:linear-gradient(90deg,var(--green),var(--green-2));
      color:#fff;font-weight:700;cursor:pointer;box-shadow:0 0 10px rgba(74,222,128,.55);
    }
    table{ width:100%;border-collapse:separate;border-spacing:0 10px; }
    th, td{padding:12px 14px;text-align:left;background:#fff}
    th{
      color:#065f46;background:#e8fff2;border-top-left-radius:12px;border-top-right-radius:12px
    }
    tr td:first-child{border-top-left-radius:12px;border-bottom-left-radius:12px}
    tr td:last-child{border-top-right-radius:12px;border-bottom-right-radius:12px}
    .status{
      padding:6px 10px;border-radius:999px;font-weight:700;font-size:.85rem;
      background:#f1f5f9;color:#0f172a
    }
    .s-new{background:#dcfce7;color:#166534}
    .s-prog{background:#fef9c3;color:#854d0e}
    .s-done{background:#e2e8f0;color:#475569}
    footer{padding:16px;text-align:center;color:#64748b}
  </style>
</head>
<body>
  <nav>
    <div class="brand">🎧 HaloRadio • Admin</div>
    <div class="badge">🔔 <span id="newCount">0</span> Request Baru</div>
    <a href="/admin/logout" style="text-decoration:none;color:#0f172a;font-weight:700">Logout</a>
  </nav>

  <div class="container">
    <div class="filter">
      <label for="fstatus">Filter status:</label>
      <select id="fstatus">
        <option value="">Semua</option>
        <option value="New">New</option>
        <option value="In-Progress">In-Progress</option>
        <option value="Done">Done</option>
      </select>
      <button id="refreshBtn">Refresh</button>
    </div>

    <table id="tbl">
      <thead>
        <tr>
          <th style="width:280px">ID (Mongo ObjectId)</th>
          <th style="width:160px">Nama</th>
          <th>Judul Lagu</th>
          <th style="width:170px">Waktu</th>
          <th style="width:150px">Status</th>
          <th style="width:220px">Aksi</th>
        </tr>
      </thead>
      <tbody id="tbody"></tbody>
    </table>
  </div>

  <footer>© 2025 HaloRadio</footer>

  <script>
    const tbody = document.getElementById('tbody');
    const fstatus = document.getElementById('fstatus');
    const refreshBtn = document.getElementById('refreshBtn');
    const newCountEl = document.getElementById('newCount');

    function pill(status){
      if(status === 'New') return '<span class="status s-new">New</span>';
      if(status === 'In-Progress') return '<span class="status s-prog">In-Progress</span>';
      return '<span class="status s-done">Done</span>';
    }

    async function loadCount(){
      try{
        const r = await fetch('/api/admin/requests/new_count');
        const j = await r.json();
        newCountEl.textContent = j.count ?? 0;
      }catch{ newCountEl.textContent = '0'; }
    }

    async function loadData(){
      const qs = fstatus.value ? ('?status=' + encodeURIComponent(fstatus.value)) : '';
      const res = await fetch('/api/admin/requests' + qs);
      const data = await res.json();
      tbody.innerHTML = '';
      (data.items || []).forEach(item => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td style="font-family:monospace">${item._id}</td>
          <td>${item.name}</td>
          <td>${item.title}</td>
          <td>${new Date(item.created_at).toLocaleString()}</td>
          <td>${pill(item.status)}</td>
          <td>
            <button onclick="setStatus('${item._id}', 'New')">Set New</button>
            <button onclick="setStatus('${item._id}', 'In-Progress')">In-Progress</button>
            <button onclick="setStatus('${item._id}', 'Done')">Done</button>
          </td>
        `;
        tbody.appendChild(tr);
      });
      loadCount();
    }

    async function setStatus(id, status){
      await fetch('/api/admin/requests/' + id + '/status', {
        method:'POST',
        headers:{'Content-Type':'application/json'},
        body:JSON.stringify({status})
      });
      loadData();
    }

    fstatus.addEventListener('change', loadData);
    refreshBtn.addEventListener('click', loadData);

    // pertama kali
    loadData();

    // polling tiap 5 detik untuk badge notifikasi & auto-refresh
    setInterval(() => {
      loadCount();
      if(!fstatus.value || fstatus.value === 'New'){
        loadData();
      }
    }, 5000);
  </script>
</body>
</html> ,,,,# app.py
from flask import Flask, render_template, Response, jsonify, request, redirect, url_for, session
import requests as pyrequests
import os
from datetime import datetime, timezone
from bson import ObjectId
from pymongo import MongoClient, ASCENDING, DESCENDING
from dotenv import load_dotenv

# ====== Load .env (opsional, tapi direkomendasikan) ======
load_dotenv()

# ====== Konfigurasi dasar Flask ======
app = Flask(__name__)
app.secret_key = os.getenv("FLASK_SECRET_KEY", "dev-secret-change-me")

# ====== Konfigurasi Icecast / Mixxx ======
ICECAST_HOST = os.getenv("ICECAST_HOST", "http://localhost:8000")
MOUNT = os.getenv("ICECAST_MOUNT", "/stream")
ICECAST_URL = f"{ICECAST_HOST}{MOUNT}"

# ====== Konfigurasi Admin sederhana ======
ADMIN_USER = os.getenv("ADMIN_USER", "admin")
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD", "admin123")  # ganti di .env

# ====== Koneksi MongoDB ======
# Contoh MONGODB_URI lokal: "mongodb://localhost:27017"
# Contoh Atlas: "mongodb+srv://user:pass@cluster0.xxxxxx.mongodb.net"
MONGODB_URI = os.getenv("MONGODB_URI", "mongodb://localhost:27017")
MONGODB_DBNAME = os.getenv("MONGODB_DBNAME", "haloradio_db")
MONGODB_COLL = os.getenv("MONGODB_COLL", "song_requests")

mongo_client = MongoClient(MONGODB_URI)
db = mongo_client[MONGODB_DBNAME]
col_requests = db[MONGODB_COLL]

# Buat index untuk performa
col_requests.create_index([("created_at", DESCENDING)])
col_requests.create_index([("status", ASCENDING), ("created_at", DESCENDING)])

# ====== Util auth admin ======
def is_admin():
    return session.get("is_admin") is True

def admin_required(fn):
    from functools import wraps
    @wraps(fn)
    def wrapper(*args, **kwargs):
        if not is_admin():
            return redirect(url_for("admin_login"))
        return fn(*args, **kwargs)
    return wrapper

# ====== ROUTES: Public ======
@app.route("/")
def home():
    return render_template("welcome.html")

@app.route("/radio")
def radio_page():
    return render_template("radio.html")

@app.route("/stream")
def stream_proxy():
    """
    Reverse proxy: meneruskan audio stream dari Icecast ke client.
    """
    try:
        r = pyrequests.get(ICECAST_URL, stream=True, timeout=10)
        content_type = r.headers.get("content-type", "audio/mpeg")
        return Response(r.iter_content(chunk_size=1024), content_type=content_type)
    except pyrequests.exceptions.RequestException as e:
        print(f"Error connecting to Icecast: {e}")
        return "Server radio sedang tidak aktif. Silakan coba lagi nanti.", 503

@app.route("/stats")
def stats():
    """
    Ambil metadata & jumlah pendengar dari Icecast /status-json.xsl
    Mengembalikan JSON: { listeners, now_playing, bitrate, content_type, mount }
    """
    try:
        resp = pyrequests.get(f"{ICECAST_HOST}/status-json.xsl", timeout=5)
        data = resp.json()
        sources = data.get("icestats", {}).get("source", [])

        # Jika hanya satu mount, Icecast kadang mengembalikan dict, normalkan ke list
        if isinstance(sources, dict):
            sources = [sources]

        selected = None
        for s in sources:
            listenurl = s.get("listenurl", "")
            mount_name = s.get("mount") or ""
            if listenurl.endswith(MOUNT) or mount_name == MOUNT:
                selected = s
                break

        if not selected and sources:
            selected = sources[0]

        if not selected:
            return jsonify({
                "listeners": 0,
                "now_playing": "-",
                "bitrate": None,
                "content_type": None,
                "mount": MOUNT
            }), 200

        title = selected.get("title") or ""
        artist = selected.get("artist") or ""
        server_name = selected.get("server_name") or ""

        if title:
            now_playing = title  # sering sudah "Artist - Title" dari Mixxx
        elif artist and server_name:
            now_playing = f"{artist} - {server_name}"
        else:
            now_playing = title or artist or server_name or "-"

        return jsonify({
            "listeners": selected.get("listeners", 0),
            "now_playing": now_playing,
            "bitrate": selected.get("bitrate"),
            "content_type": selected.get("content_type"),
            "mount": selected.get("listenurl") or selected.get("mount") or MOUNT
        })
    except Exception as e:
        print("Stats error:", e)
        return jsonify({
            "listeners": 0,
            "now_playing": "-",
            "bitrate": None,
            "content_type": None,
            "mount": MOUNT
        }), 200

# ====== API: User Request Lagu (MongoDB) ======
@app.route("/api/request_song", methods=["POST"])
def api_request_song():
    """
    Body JSON: { "name": "...", "title": "..." }
    Simpan ke MongoDB dengan status 'New'
    """
    data = request.get_json(silent=True) or {}
    name = (data.get("name") or "").strip()
    title = (data.get("title") or "").strip()

    if not name or not title:
        return jsonify({"ok": False, "error": "Nama dan Judul Lagu wajib diisi."}), 400

    doc = {
        "name": name,
        "title": title,
        "status": "New",
        "created_at": datetime.now(timezone.utc)
    }
    res = col_requests.insert_one(doc)
    return jsonify({"ok": True, "id": str(res.inserted_id)})

# ====== ROUTES: Admin ======
@app.route("/admin/login", methods=["GET", "POST"])
def admin_login():
    if request.method == "POST":
        user = request.form.get("username")
        pwd = request.form.get("password")
        if user == ADMIN_USER and pwd == ADMIN_PASSWORD:
            session["is_admin"] = True
            return redirect(url_for("admin_dashboard"))
        return render_template("admin_login.html", error="Username/Password salah.")
    return render_template("admin_login.html")

@app.route("/admin/logout")
def admin_logout():
    session.clear()
    return redirect(url_for("admin_login"))

@app.route("/admin")
@admin_required
def admin_dashboard():
    return render_template("admin.html")

# API Admin: ambil daftar request (dengan filter status opsional)
@app.route("/api/admin/requests")
@admin_required
def admin_requests():
    status = request.args.get("status")  # None, "New", "In-Progress", "Done"
    q = {}
    if status:
        q["status"] = status

    items = []
    for d in col_requests.find(q).sort("created_at", DESCENDING):
        items.append({
            "_id": str(d["_id"]),
            "name": d.get("name", ""),
            "title": d.get("title", ""),
            "status": d.get("status", "New"),
            "created_at": d.get("created_at", datetime.now(timezone.utc)).isoformat()
        })
    return jsonify({"ok": True, "items": items})

# API Admin: update status request
@app.route("/api/admin/requests/<req_id>/status", methods=["POST"])
@admin_required
def admin_update_status(req_id):
    data = request.get_json(silent=True) or {}
    status = (data.get("status") or "").strip()
    if status not in {"New", "In-Progress", "Done"}:
        return jsonify({"ok": False, "error": "Status tidak valid."}), 400

    try:
        oid = ObjectId(req_id)
    except Exception:
        return jsonify({"ok": False, "error": "ID tidak valid."}), 400

    result = col_requests.update_one({"_id": oid}, {"$set": {"status": status}})
    if result.matched_count == 0:
        return jsonify({"ok": False, "error": "ID tidak ditemukan."}), 404
    return jsonify({"ok": True})

# API Admin: total unread/new untuk badge notifikasi
@app.route("/api/admin/requests/new_count")
@admin_required
def admin_new_count():
    count = col_requests.count_documents({"status": "New"})
    return jsonify({"ok": True, "count": count})

if __name__ == "__main__":
    # Jalankan Flask
    app.run(host="0.0.0.0", port=5000, debug=True)
